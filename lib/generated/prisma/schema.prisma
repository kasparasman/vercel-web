generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         Int       @id @default(autoincrement())
  topic_id   Int
  author_id  String
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  profiles   profiles  @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  topics     topics    @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([topic_id, created_at(sort: Desc)])
}

model likes {
  id         Int       @id @default(autoincrement())
  topic_id   Int
  user_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  topics     topics    @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   profiles  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([topic_id, user_id])
  @@index([topic_id])
}

model profiles {
  id         String     @id @default(dbgenerated("gen_random_uuid()"))
  email      String     @unique
  nickname   String     @unique
  avatar_url String?
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  comments   comments[]
  likes      likes[]
}

model topics {
  id         Int        @id @default(autoincrement())
  date       DateTime   @unique @db.Date
  title      String
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  body       String?
  comments   comments[]
  likes      likes[]
}
